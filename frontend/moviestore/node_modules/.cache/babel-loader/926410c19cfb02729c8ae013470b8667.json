{"ast":null,"code":"var _jsxFileName = \"/Users/fabiorosa/Study/locadora-filmes/frontend/moviestore/src/pages/GenreForm/index.js\";\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\n\n/* eslint-disable react/forbid-prop-types */\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { TextField, Checkbox } from 'unform-material-ui';\nimport PropTypes from 'prop-types';\nimport { getGenre, saveGenre } from '../../services/Genres/genreService';\nimport useStyles from './styles';\nexport default function GenreForm({\n  history,\n  match\n}) {\n  const classes = useStyles();\n  const formRef = useRef(null);\n  const [status, setStatus] = useState(true);\n  const schema = Yup.object().shape({\n    name: Yup.string().required('Nome é obrigatório!')\n  });\n\n  const handleSubmit = async data => {\n    try {\n      // Remove all previous errors\n      formRef.current.setErrors({});\n      await schema.validate(data, {\n        abortEarly: false\n      }); // Validation passed\n\n      const genreEntity = {\n        status: status ? 1 : 0,\n        ...data\n      };\n      await saveGenre(genreEntity);\n      history.push('/genres');\n    } catch (err) {\n      const validationErrors = {};\n\n      if (err instanceof Yup.ValidationError) {\n        err.inner.forEach(error => {\n          validationErrors[error.path] = error.message;\n        });\n        formRef.current.setErrors(validationErrors);\n      }\n    }\n  };\n\n  const loadGenre = async id => {\n    if (id > 0) {\n      const {\n        data\n      } = await getGenre(id);\n      const {\n        dataStatus,\n        ...model\n      } = data;\n      console.log(dataStatus);\n      formRef.current.setData(model);\n      setStatus(dataStatus === 1);\n    } else {\n      formRef.current.setData({\n        id: 0,\n        name: '',\n        creationDate: new Date().toISOString()\n      });\n    }\n  };\n\n  const handleChangeStatus = event => {\n    setStatus(event.target.checked);\n  };\n\n  useEffect(() => {\n    const {\n      id\n    } = match.params;\n    loadGenre(id);\n  }, [match.params]);\n  return /*#__PURE__*/React.createElement(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"G\\xEAnero\"), /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    className: classes.form,\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    name: \"name\",\n    variant: \"outlined\",\n    margin: \"normal\",\n    fullWidth: true,\n    label: \"Nome\",\n    autoComplete: \"name\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      name: \"status\",\n      color: \"primary\",\n      checked: status,\n      onChange: handleChangeStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }\n    }),\n    label: \"Ativo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"Salvar\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, \"Cancelar\"))));\n}\nGenreForm.defaultProps = {\n  history: null,\n  match: null\n};\nGenreForm.propTypes = {\n  history: PropTypes.any,\n  match: PropTypes.any\n};","map":{"version":3,"sources":["/Users/fabiorosa/Study/locadora-filmes/frontend/moviestore/src/pages/GenreForm/index.js"],"names":["React","useRef","useEffect","useState","Form","Yup","Button","Container","FormControlLabel","CssBaseline","Typography","TextField","Checkbox","PropTypes","getGenre","saveGenre","useStyles","GenreForm","history","match","classes","formRef","status","setStatus","schema","object","shape","name","string","required","handleSubmit","data","current","setErrors","validate","abortEarly","genreEntity","push","err","validationErrors","ValidationError","inner","forEach","error","path","message","loadGenre","id","dataStatus","model","console","log","setData","creationDate","Date","toISOString","handleChangeStatus","event","target","checked","params","paper","form","submit","defaultProps","propTypes","any"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react/forbid-prop-types */\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { TextField, Checkbox } from 'unform-material-ui';\nimport PropTypes from 'prop-types';\nimport { getGenre, saveGenre } from '../../services/Genres/genreService';\nimport useStyles from './styles';\n\nexport default function GenreForm({ history, match }) {\n  const classes = useStyles();\n\n  const formRef = useRef(null);\n\n  const [status, setStatus] = useState(true);\n\n  const schema = Yup.object().shape({\n    name: Yup.string().required('Nome é obrigatório!'),\n  });\n\n  const handleSubmit = async data => {\n    try {\n      // Remove all previous errors\n      formRef.current.setErrors({});\n      await schema.validate(data, {\n        abortEarly: false,\n      });\n      // Validation passed\n      const genreEntity = { status: status ? 1 : 0, ...data };\n      await saveGenre(genreEntity);\n      history.push('/genres');\n    } catch (err) {\n      const validationErrors = {};\n      if (err instanceof Yup.ValidationError) {\n        err.inner.forEach(error => {\n          validationErrors[error.path] = error.message;\n        });\n        formRef.current.setErrors(validationErrors);\n      }\n    }\n  };\n\n  const loadGenre = async id => {\n    if (id > 0) {\n      const { data } = await getGenre(id);\n      const { dataStatus, ...model } = data;\n      console.log(dataStatus);\n      formRef.current.setData(model);\n      setStatus(dataStatus === 1);\n    } else {\n      formRef.current.setData({\n        id: 0,\n        name: '',\n        creationDate: new Date().toISOString(),\n      });\n    }\n  };\n\n  const handleChangeStatus = event => {\n    setStatus(event.target.checked);\n  };\n\n  useEffect(() => {\n    const { id } = match.params;\n    loadGenre(id);\n  }, [match.params]);\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Gênero\n        </Typography>\n        <Form\n          ref={formRef}\n          onSubmit={handleSubmit}\n          className={classes.form}\n          noValidate\n        >\n          <TextField\n            name=\"name\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            label=\"Nome\"\n            autoComplete=\"name\"\n            autoFocus\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                name=\"status\"\n                color=\"primary\"\n                checked={status}\n                onChange={handleChangeStatus}\n              />\n            }\n            label=\"Ativo\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Salvar\n          </Button>\n          <Button type=\"button\" fullWidth variant=\"contained\" color=\"secondary\">\n            Cancelar\n          </Button>\n        </Form>\n      </div>\n    </Container>\n  );\n}\n\nGenreForm.defaultProps = {\n  history: null,\n  match: null,\n};\n\nGenreForm.propTypes = {\n  history: PropTypes.any,\n  match: PropTypes.any,\n};\n"]},"metadata":{},"sourceType":"module"}