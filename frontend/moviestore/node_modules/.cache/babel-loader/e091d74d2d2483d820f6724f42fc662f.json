{"ast":null,"code":"var _jsxFileName = \"/Users/fabiorosa/Study/locadora-filmes/frontend/moviestore/src/pages/MovieForm/index.js\";\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\n\n/* eslint-disable react/forbid-prop-types */\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { TextField } from 'unform-material-ui';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport PropTypes from 'prop-types';\nimport { getMovie, saveMovie } from '../../services/Movies/movieService';\nimport { getGenres } from '../../services/Genres/genreService';\nimport useStyles from './styles';\nexport default function MovieForm({\n  history,\n  match\n}) {\n  const classes = useStyles();\n  const formRef = useRef(null);\n  const [movie, setMovie] = useState({\n    id: 0,\n    name: '',\n    genreId: 0,\n    status: 1,\n    creationDate: new Date().toISOString()\n  });\n  const [selectedGenre, setSelectedGenre] = useState({\n    value: 0,\n    error: ''\n  });\n  const [genres, setGenres] = useState([]);\n  const [status, setStatus] = useState(true);\n  const schema = Yup.object().shape({\n    name: Yup.string().required('Nome é obrigatório!'),\n    genreId: Yup.number().moreThan(0, 'Gênero é obrigatório!')\n  });\n\n  const handleSubmit = async data => {\n    try {\n      // Remove all previous errors\n      formRef.current.setErrors({});\n      await schema.validate(data, {\n        abortEarly: false\n      }); // Validation passed\n\n      movie.name = data.name;\n      movie.genreId = data.genreId;\n      movie.status = status ? 1 : 0;\n      await saveMovie(movie);\n      history.push('/movies');\n    } catch (err) {\n      const validationErrors = {};\n\n      if (err instanceof Yup.ValidationError) {\n        err.inner.forEach(error => {\n          validationErrors[error.path] = error.message;\n        });\n        formRef.current.setErrors(validationErrors);\n      }\n    }\n  };\n\n  const handleChangeStatus = event => {\n    setStatus(event.target.checked);\n  };\n\n  const handleCancel = () => {\n    history.push('/movies');\n  };\n\n  useEffect(() => {\n    const loadData = async () => {\n      const {\n        data: allGenres\n      } = await getGenres();\n      setGenres(allGenres);\n      const {\n        id\n      } = match.params;\n\n      if (id > 0) {\n        const {\n          data\n        } = await getMovie(id);\n        formRef.current.setData(data);\n        setStatus(data.status === 1);\n        setMovie(data);\n      } else {\n        formRef.current.setData(movie);\n      }\n    };\n\n    loadData();\n  }, []);\n  return /*#__PURE__*/React.createElement(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Filme\"), /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    className: classes.form,\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    name: \"name\",\n    variant: \"outlined\",\n    margin: \"normal\",\n    fullWidth: true,\n    label: \"Nome\",\n    autoComplete: \"name\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    id: \"genreId-select-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, \"G\\xEAnero\"), /*#__PURE__*/React.createElement(Select, {\n    labelId: \"genreId-select-label\",\n    label: \"G\\xEAnero\",\n    name: \"genreId\",\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, genres.map(g => /*#__PURE__*/React.createElement(MenuItem, {\n    fullWidth: true,\n    value: g.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, g.name)))), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      name: \"status\",\n      color: \"primary\",\n      checked: status,\n      onChange: handleChangeStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }),\n    label: \"Ativo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, \"Salvar\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, \"Cancelar\"))));\n}\nMovieForm.defaultProps = {\n  history: null,\n  match: null\n};\nMovieForm.propTypes = {\n  history: PropTypes.any,\n  match: PropTypes.any\n};","map":{"version":3,"sources":["/Users/fabiorosa/Study/locadora-filmes/frontend/moviestore/src/pages/MovieForm/index.js"],"names":["React","useRef","useEffect","useState","Form","Yup","Button","Container","FormControlLabel","CssBaseline","Typography","TextField","Select","FormControl","InputLabel","Checkbox","MenuItem","PropTypes","getMovie","saveMovie","getGenres","useStyles","MovieForm","history","match","classes","formRef","movie","setMovie","id","name","genreId","status","creationDate","Date","toISOString","selectedGenre","setSelectedGenre","value","error","genres","setGenres","setStatus","schema","object","shape","string","required","number","moreThan","handleSubmit","data","current","setErrors","validate","abortEarly","push","err","validationErrors","ValidationError","inner","forEach","path","message","handleChangeStatus","event","target","checked","handleCancel","loadData","allGenres","params","setData","paper","form","formControl","width","map","g","submit","defaultProps","propTypes","any"],"mappings":";;AAAA;;AACA;AACA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,oCAApC;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA,OAAOC,SAAP,MAAsB,UAAtB;AAEA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAnB,EAAuC;AACpD,QAAMC,OAAO,GAAGJ,SAAS,EAAzB;AAEA,QAAMK,OAAO,GAAGzB,MAAM,CAAC,IAAD,CAAtB;AAEA,QAAM,CAAC0B,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC;AACjC0B,IAAAA,EAAE,EAAE,CAD6B;AAEjCC,IAAAA,IAAI,EAAE,EAF2B;AAGjCC,IAAAA,OAAO,EAAE,CAHwB;AAIjCC,IAAAA,MAAM,EAAE,CAJyB;AAKjCC,IAAAA,YAAY,EAAE,IAAIC,IAAJ,GAAWC,WAAX;AALmB,GAAD,CAAlC;AAQA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoClC,QAAQ,CAAC;AACjDmC,IAAAA,KAAK,EAAE,CAD0C;AAEjDC,IAAAA,KAAK,EAAE;AAF0C,GAAD,CAAlD;AAKA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBtC,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAC6B,MAAD,EAASU,SAAT,IAAsBvC,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAMwC,MAAM,GAAGtC,GAAG,CAACuC,MAAJ,GAAaC,KAAb,CAAmB;AAChCf,IAAAA,IAAI,EAAEzB,GAAG,CAACyC,MAAJ,GAAaC,QAAb,CAAsB,qBAAtB,CAD0B;AAEhChB,IAAAA,OAAO,EAAE1B,GAAG,CAAC2C,MAAJ,GAAaC,QAAb,CAAsB,CAAtB,EAAyB,uBAAzB;AAFuB,GAAnB,CAAf;;AAKA,QAAMC,YAAY,GAAG,MAAMC,IAAN,IAAc;AACjC,QAAI;AACF;AACAzB,MAAAA,OAAO,CAAC0B,OAAR,CAAgBC,SAAhB,CAA0B,EAA1B;AACA,YAAMV,MAAM,CAACW,QAAP,CAAgBH,IAAhB,EAAsB;AAC1BI,QAAAA,UAAU,EAAE;AADc,OAAtB,CAAN,CAHE,CAMF;;AACA5B,MAAAA,KAAK,CAACG,IAAN,GAAaqB,IAAI,CAACrB,IAAlB;AACAH,MAAAA,KAAK,CAACI,OAAN,GAAgBoB,IAAI,CAACpB,OAArB;AACAJ,MAAAA,KAAK,CAACK,MAAN,GAAeA,MAAM,GAAG,CAAH,GAAO,CAA5B;AACA,YAAMb,SAAS,CAACQ,KAAD,CAAf;AACAJ,MAAAA,OAAO,CAACiC,IAAR,CAAa,SAAb;AACD,KAZD,CAYE,OAAOC,GAAP,EAAY;AACZ,YAAMC,gBAAgB,GAAG,EAAzB;;AACA,UAAID,GAAG,YAAYpD,GAAG,CAACsD,eAAvB,EAAwC;AACtCF,QAAAA,GAAG,CAACG,KAAJ,CAAUC,OAAV,CAAkBtB,KAAK,IAAI;AACzBmB,UAAAA,gBAAgB,CAACnB,KAAK,CAACuB,IAAP,CAAhB,GAA+BvB,KAAK,CAACwB,OAArC;AACD,SAFD;AAGArC,QAAAA,OAAO,CAAC0B,OAAR,CAAgBC,SAAhB,CAA0BK,gBAA1B;AACD;AACF;AACF,GAtBD;;AAwBA,QAAMM,kBAAkB,GAAGC,KAAK,IAAI;AAClCvB,IAAAA,SAAS,CAACuB,KAAK,CAACC,MAAN,CAAaC,OAAd,CAAT;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAG,MAAM;AACzB7C,IAAAA,OAAO,CAACiC,IAAR,CAAa,SAAb;AACD,GAFD;;AAIAtD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmE,QAAQ,GAAG,YAAY;AAC3B,YAAM;AAAElB,QAAAA,IAAI,EAAEmB;AAAR,UAAsB,MAAMlD,SAAS,EAA3C;AACAqB,MAAAA,SAAS,CAAC6B,SAAD,CAAT;AACA,YAAM;AAAEzC,QAAAA;AAAF,UAASL,KAAK,CAAC+C,MAArB;;AACA,UAAI1C,EAAE,GAAG,CAAT,EAAY;AACV,cAAM;AAAEsB,UAAAA;AAAF,YAAW,MAAMjC,QAAQ,CAACW,EAAD,CAA/B;AACAH,QAAAA,OAAO,CAAC0B,OAAR,CAAgBoB,OAAhB,CAAwBrB,IAAxB;AACAT,QAAAA,SAAS,CAACS,IAAI,CAACnB,MAAL,KAAgB,CAAjB,CAAT;AACAJ,QAAAA,QAAQ,CAACuB,IAAD,CAAR;AACD,OALD,MAKO;AACLzB,QAAAA,OAAO,CAAC0B,OAAR,CAAgBoB,OAAhB,CAAwB7C,KAAxB;AACD;AACF,KAZD;;AAaA0C,IAAAA,QAAQ;AACT,GAfQ,EAeN,EAfM,CAAT;AAiBA,sBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,MAArB;AAA4B,IAAA,QAAQ,EAAC,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAK,IAAA,SAAS,EAAE5C,OAAO,CAACgD,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,IAAtB;AAA2B,IAAA,OAAO,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAIE,oBAAC,IAAD;AACE,IAAA,GAAG,EAAE/C,OADP;AAEE,IAAA,QAAQ,EAAEwB,YAFZ;AAGE,IAAA,SAAS,EAAEzB,OAAO,CAACiD,IAHrB;AAIE,IAAA,UAAU,MAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,OAAO,EAAC,UAFV;AAGE,IAAA,MAAM,EAAC,QAHT;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,KAAK,EAAC,MALR;AAME,IAAA,YAAY,EAAC,MANf;AAOE,IAAA,SAAS,MAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAeE,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAC,UAArB;AAAgC,IAAA,SAAS,EAAEjD,OAAO,CAACkD,WAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,EAAE,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,sBADV;AAEE,IAAA,KAAK,EAAC,WAFR;AAGE,IAAA,IAAI,EAAC,SAHP;AAIE,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGpC,MAAM,CAACqC,GAAP,CAAWC,CAAC,iBACX,oBAAC,QAAD;AAAU,IAAA,SAAS,MAAnB;AAAoB,IAAA,KAAK,EAAEA,CAAC,CAACjD,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGiD,CAAC,CAAChD,IADL,CADD,CANH,CAFF,CAfF,eA8BE,oBAAC,gBAAD;AACE,IAAA,OAAO,eACL,oBAAC,QAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,OAAO,EAAEE,MAHX;AAIE,MAAA,QAAQ,EAAEgC,kBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AASE,IAAA,KAAK,EAAC,OATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9BF,eAyCE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,OAAO,EAAC,WAHV;AAIE,IAAA,KAAK,EAAC,SAJR;AAKE,IAAA,SAAS,EAAEvC,OAAO,CAACsD,MALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzCF,eAkDE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,OAAO,EAAC,WAHV;AAIE,IAAA,KAAK,EAAC,WAJR;AAKE,IAAA,OAAO,EAAEX,YALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlDF,CAJF,CAFF,CADF;AAsED;AAED9C,SAAS,CAAC0D,YAAV,GAAyB;AACvBzD,EAAAA,OAAO,EAAE,IADc;AAEvBC,EAAAA,KAAK,EAAE;AAFgB,CAAzB;AAKAF,SAAS,CAAC2D,SAAV,GAAsB;AACpB1D,EAAAA,OAAO,EAAEN,SAAS,CAACiE,GADC;AAEpB1D,EAAAA,KAAK,EAAEP,SAAS,CAACiE;AAFG,CAAtB","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react/forbid-prop-types */\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { TextField } from 'unform-material-ui';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport PropTypes from 'prop-types';\nimport { getMovie, saveMovie } from '../../services/Movies/movieService';\nimport { getGenres } from '../../services/Genres/genreService';\nimport useStyles from './styles';\n\nexport default function MovieForm({ history, match }) {\n  const classes = useStyles();\n\n  const formRef = useRef(null);\n\n  const [movie, setMovie] = useState({\n    id: 0,\n    name: '',\n    genreId: 0,\n    status: 1,\n    creationDate: new Date().toISOString(),\n  });\n\n  const [selectedGenre, setSelectedGenre] = useState({\n    value: 0,\n    error: '',\n  });\n\n  const [genres, setGenres] = useState([]);\n  const [status, setStatus] = useState(true);\n\n  const schema = Yup.object().shape({\n    name: Yup.string().required('Nome é obrigatório!'),\n    genreId: Yup.number().moreThan(0, 'Gênero é obrigatório!'),\n  });\n\n  const handleSubmit = async data => {\n    try {\n      // Remove all previous errors\n      formRef.current.setErrors({});\n      await schema.validate(data, {\n        abortEarly: false,\n      });\n      // Validation passed\n      movie.name = data.name;\n      movie.genreId = data.genreId;\n      movie.status = status ? 1 : 0;\n      await saveMovie(movie);\n      history.push('/movies');\n    } catch (err) {\n      const validationErrors = {};\n      if (err instanceof Yup.ValidationError) {\n        err.inner.forEach(error => {\n          validationErrors[error.path] = error.message;\n        });\n        formRef.current.setErrors(validationErrors);\n      }\n    }\n  };\n\n  const handleChangeStatus = event => {\n    setStatus(event.target.checked);\n  };\n\n  const handleCancel = () => {\n    history.push('/movies');\n  };\n\n  useEffect(() => {\n    const loadData = async () => {\n      const { data: allGenres } = await getGenres();\n      setGenres(allGenres);\n      const { id } = match.params;\n      if (id > 0) {\n        const { data } = await getMovie(id);\n        formRef.current.setData(data);\n        setStatus(data.status === 1);\n        setMovie(data);\n      } else {\n        formRef.current.setData(movie);\n      }\n    };\n    loadData();\n  }, []);\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Filme\n        </Typography>\n        <Form\n          ref={formRef}\n          onSubmit={handleSubmit}\n          className={classes.form}\n          noValidate\n        >\n          <TextField\n            name=\"name\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            label=\"Nome\"\n            autoComplete=\"name\"\n            autoFocus\n          />\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"genreId-select-label\">Gênero</InputLabel>\n            <Select\n              labelId=\"genreId-select-label\"\n              label=\"Gênero\"\n              name=\"genreId\"\n              style={{ width: '100%' }}\n            >\n              {genres.map(g => (\n                <MenuItem fullWidth value={g.id}>\n                  {g.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControlLabel\n            control={\n              <Checkbox\n                name=\"status\"\n                color=\"primary\"\n                checked={status}\n                onChange={handleChangeStatus}\n              />\n            }\n            label=\"Ativo\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Salvar\n          </Button>\n          <Button\n            type=\"button\"\n            fullWidth\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={handleCancel}\n          >\n            Cancelar\n          </Button>\n        </Form>\n      </div>\n    </Container>\n  );\n}\n\nMovieForm.defaultProps = {\n  history: null,\n  match: null,\n};\n\nMovieForm.propTypes = {\n  history: PropTypes.any,\n  match: PropTypes.any,\n};\n"]},"metadata":{},"sourceType":"module"}