{"ast":null,"code":"var _jsxFileName = \"/Users/fabiorosa/Study/locadora-filmes/frontend/moviestore/src/pages/GenreForm/index.js\";\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\n\n/* eslint-disable react/forbid-prop-types */\nimport React, { useRef, useEffect } from 'react';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { TextField, Checkbox } from 'unform-material-ui';\nimport PropTypes from 'prop-types';\nimport { getGenre, saveGenre } from '../../services/Genres/genreService';\nimport useStyles from './styles';\nexport default function GenreForm({\n  history,\n  match\n}) {\n  const classes = useStyles();\n  const formRef = useRef(null);\n  const schema = Yup.object().shape({\n    name: Yup.string().required('Nome é obrigatório!')\n  });\n\n  const handleSubmit = async data => {\n    try {\n      // Remove all previous errors\n      formRef.current.setErrors({});\n      await schema.validate(data, {\n        abortEarly: false\n      }); // Validation passed\n\n      const genreEntity = {\n        status: data.status ? 1 : 0,\n        ...data\n      };\n      await saveGenre(genreEntity);\n      history.push('/genres');\n    } catch (err) {\n      const validationErrors = {};\n\n      if (err instanceof Yup.ValidationError) {\n        err.inner.forEach(error => {\n          validationErrors[error.path] = error.message;\n        });\n        formRef.current.setErrors(validationErrors);\n      }\n    }\n  };\n\n  const loadGenre = async id => {\n    if (id > 0) {\n      const {\n        data\n      } = await getGenre(id);\n      const {\n        status,\n        ...model\n      } = data;\n      const genreModel = {\n        status: data.status === 1,\n        ...model\n      };\n      formRef.current.setData(genreModel);\n    } else {\n      formRef.current.setData({\n        id: 0,\n        name: '',\n        status: true,\n        creationDate: new Date().toISOString()\n      });\n    }\n  };\n\n  useEffect(() => {\n    const {\n      id\n    } = match.params;\n    loadGenre(id);\n  }, []);\n  return /*#__PURE__*/React.createElement(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"G\\xEAnero\"), /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    className: classes.form,\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    name: \"name\",\n    variant: \"outlined\",\n    margin: \"normal\",\n    fullWidth: true,\n    label: \"Nome\",\n    autoComplete: \"name\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      name: \"status\",\n      value: \"status\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 22\n      }\n    }),\n    label: \"Ativo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"Salvar\"))));\n}\nGenreForm.defaultProps = {\n  history: null,\n  match: null\n};\nGenreForm.propTypes = {\n  history: PropTypes.any,\n  match: PropTypes.any\n};","map":{"version":3,"sources":["/Users/fabiorosa/Study/locadora-filmes/frontend/moviestore/src/pages/GenreForm/index.js"],"names":["React","useRef","useEffect","Form","Yup","Button","Container","FormControlLabel","CssBaseline","Typography","TextField","Checkbox","PropTypes","getGenre","saveGenre","useStyles","GenreForm","history","match","classes","formRef","schema","object","shape","name","string","required","handleSubmit","data","current","setErrors","validate","abortEarly","genreEntity","status","push","err","validationErrors","ValidationError","inner","forEach","error","path","message","loadGenre","id","model","genreModel","setData","creationDate","Date","toISOString","params","paper","form","submit","defaultProps","propTypes","any"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react/forbid-prop-types */\nimport React, { useRef, useEffect } from 'react';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { TextField, Checkbox } from 'unform-material-ui';\nimport PropTypes from 'prop-types';\nimport { getGenre, saveGenre } from '../../services/Genres/genreService';\nimport useStyles from './styles';\n\nexport default function GenreForm({ history, match }) {\n  const classes = useStyles();\n\n  const formRef = useRef(null);\n\n  const schema = Yup.object().shape({\n    name: Yup.string().required('Nome é obrigatório!'),\n  });\n\n  const handleSubmit = async data => {\n    try {\n      // Remove all previous errors\n      formRef.current.setErrors({});\n      await schema.validate(data, {\n        abortEarly: false,\n      });\n      // Validation passed\n      const genreEntity = { status: data.status ? 1 : 0, ...data };\n      await saveGenre(genreEntity);\n      history.push('/genres');\n    } catch (err) {\n      const validationErrors = {};\n      if (err instanceof Yup.ValidationError) {\n        err.inner.forEach(error => {\n          validationErrors[error.path] = error.message;\n        });\n        formRef.current.setErrors(validationErrors);\n      }\n    }\n  };\n\n  const loadGenre = async id => {\n    if (id > 0) {\n      const { data } = await getGenre(id);\n      const { status, ...model } = data;\n      const genreModel = {\n        status: data.status === 1,\n        ...model,\n      };\n      formRef.current.setData(genreModel);\n    } else {\n      formRef.current.setData({\n        id: 0,\n        name: '',\n        status: true,\n        creationDate: new Date().toISOString(),\n      });\n    }\n  };\n\n  useEffect(() => {\n    const { id } = match.params;\n    loadGenre(id);\n  }, []);\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Gênero\n        </Typography>\n        <Form\n          ref={formRef}\n          onSubmit={handleSubmit}\n          className={classes.form}\n          noValidate\n        >\n          <TextField\n            name=\"name\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            label=\"Nome\"\n            autoComplete=\"name\"\n            autoFocus\n          />\n          <FormControlLabel\n            control={<Checkbox name=\"status\" value=\"status\" color=\"primary\" />}\n            label=\"Ativo\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Salvar\n          </Button>\n        </Form>\n      </div>\n    </Container>\n  );\n}\n\nGenreForm.defaultProps = {\n  history: null,\n  match: null,\n};\n\nGenreForm.propTypes = {\n  history: PropTypes.any,\n  match: PropTypes.any,\n};\n"]},"metadata":{},"sourceType":"module"}