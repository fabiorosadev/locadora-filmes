{"ast":null,"code":"var _jsxFileName = \"/Users/fabiorosa/Study/locadora-filmes/frontend/moviestore/src/pages/GenreForm/index.js\";\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\n\n/* eslint-disable react/forbid-prop-types */\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { TextField } from 'unform-material-ui';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport PropTypes from 'prop-types';\nimport { getGenre, saveGenre } from '../../services/Genres/genreService';\nimport useStyles from './styles';\nexport default function GenreForm({\n  history,\n  match\n}) {\n  const classes = useStyles();\n  const formRef = useRef(null);\n  const [genre, setGenre] = useState({});\n  const [status, setStatus] = useState(true);\n  const schema = Yup.object().shape({\n    name: Yup.string().required('Nome é obrigatório!')\n  });\n\n  const handleSubmit = async data => {\n    try {\n      // Remove all previous errors\n      formRef.current.setErrors({\n        id: 0,\n        name: '',\n        status: 1,\n        creationDate: new Date().toISOString()\n      });\n      await schema.validate(data, {\n        abortEarly: false\n      }); // Validation passed\n\n      genre.name = data.name;\n      genre.status = status ? 1 : 0;\n      await saveGenre(genre);\n      history.push('/genres');\n    } catch (err) {\n      const validationErrors = {};\n\n      if (err instanceof Yup.ValidationError) {\n        err.inner.forEach(error => {\n          validationErrors[error.path] = error.message;\n        });\n        formRef.current.setErrors(validationErrors);\n      }\n    }\n  };\n\n  const loadGenre = async id => {\n    if (id > 0) {\n      const {\n        data\n      } = await getGenre(id);\n      formRef.current.setData(data);\n      setStatus(data.status === 1);\n      setGenre(data);\n    } else {\n      formRef.current.setData(genre);\n    }\n  };\n\n  const handleChangeStatus = event => {\n    setStatus(event.target.checked);\n  };\n\n  const handleCancel = () => {\n    history.push('/genres');\n  };\n\n  useEffect(() => {\n    const {\n      id\n    } = match.params;\n    loadGenre(id);\n  }, [match.params, loadGenre]);\n  return /*#__PURE__*/React.createElement(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"G\\xEAnero\"), /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    className: classes.form,\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    name: \"name\",\n    variant: \"outlined\",\n    margin: \"normal\",\n    fullWidth: true,\n    label: \"Nome\",\n    autoComplete: \"name\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      name: \"status\",\n      color: \"primary\",\n      checked: status,\n      onChange: handleChangeStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }\n    }),\n    label: \"Ativo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, \"Salvar\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, \"Cancelar\"))));\n}\nGenreForm.defaultProps = {\n  history: null,\n  match: null\n};\nGenreForm.propTypes = {\n  history: PropTypes.any,\n  match: PropTypes.any\n};","map":{"version":3,"sources":["/Users/fabiorosa/Study/locadora-filmes/frontend/moviestore/src/pages/GenreForm/index.js"],"names":["React","useRef","useEffect","useState","Form","Yup","Button","Container","FormControlLabel","CssBaseline","Typography","TextField","Checkbox","PropTypes","getGenre","saveGenre","useStyles","GenreForm","history","match","classes","formRef","genre","setGenre","status","setStatus","schema","object","shape","name","string","required","handleSubmit","data","current","setErrors","id","creationDate","Date","toISOString","validate","abortEarly","push","err","validationErrors","ValidationError","inner","forEach","error","path","message","loadGenre","setData","handleChangeStatus","event","target","checked","handleCancel","params","paper","form","submit","defaultProps","propTypes","any"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react/forbid-prop-types */\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { TextField } from 'unform-material-ui';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport PropTypes from 'prop-types';\nimport { getGenre, saveGenre } from '../../services/Genres/genreService';\nimport useStyles from './styles';\n\nexport default function GenreForm({ history, match }) {\n  const classes = useStyles();\n\n  const formRef = useRef(null);\n\n  const [genre, setGenre] = useState({});\n  const [status, setStatus] = useState(true);\n\n  const schema = Yup.object().shape({\n    name: Yup.string().required('Nome é obrigatório!'),\n  });\n\n  const handleSubmit = async data => {\n    try {\n      // Remove all previous errors\n      formRef.current.setErrors({\n        id: 0,\n        name: '',\n        status: 1,\n        creationDate: new Date().toISOString(),\n      });\n      await schema.validate(data, {\n        abortEarly: false,\n      });\n      // Validation passed\n      genre.name = data.name;\n      genre.status = status ? 1 : 0;\n      await saveGenre(genre);\n      history.push('/genres');\n    } catch (err) {\n      const validationErrors = {};\n      if (err instanceof Yup.ValidationError) {\n        err.inner.forEach(error => {\n          validationErrors[error.path] = error.message;\n        });\n        formRef.current.setErrors(validationErrors);\n      }\n    }\n  };\n\n  const loadGenre = async id => {\n    if (id > 0) {\n      const { data } = await getGenre(id);\n      formRef.current.setData(data);\n      setStatus(data.status === 1);\n      setGenre(data);\n    } else {\n      formRef.current.setData(genre);\n    }\n  };\n\n  const handleChangeStatus = event => {\n    setStatus(event.target.checked);\n  };\n\n  const handleCancel = () => {\n    history.push('/genres');\n  };\n\n  useEffect(() => {\n    const { id } = match.params;\n    loadGenre(id);\n  }, [match.params, loadGenre]);\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Gênero\n        </Typography>\n        <Form\n          ref={formRef}\n          onSubmit={handleSubmit}\n          className={classes.form}\n          noValidate\n        >\n          <TextField\n            name=\"name\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            label=\"Nome\"\n            autoComplete=\"name\"\n            autoFocus\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                name=\"status\"\n                color=\"primary\"\n                checked={status}\n                onChange={handleChangeStatus}\n              />\n            }\n            label=\"Ativo\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Salvar\n          </Button>\n          <Button\n            type=\"button\"\n            fullWidth\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={handleCancel}\n          >\n            Cancelar\n          </Button>\n        </Form>\n      </div>\n    </Container>\n  );\n}\n\nGenreForm.defaultProps = {\n  history: null,\n  match: null,\n};\n\nGenreForm.propTypes = {\n  history: PropTypes.any,\n  match: PropTypes.any,\n};\n"]},"metadata":{},"sourceType":"module"}